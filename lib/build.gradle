/*
 * OpenXR Java bindings for Android
 */

plugins {
    // Apply the Android library plugin
    id 'com.android.library'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    google()
}

android {
    namespace 'com.onemillionworlds.tamarin.openxrbindings'
    compileSdk 33

    // Specify the manifest file location
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    defaultConfig {
        minSdk 24
        targetSdk 33

        // Configure CMake
        externalNativeBuild {
            cmake {
                cppFlags ''
                arguments "-DANDROID_STL=c++_shared"
            }
        }

        // Specify which ABIs to build for
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    // Link to CMakeLists.txt
    externalNativeBuild {
        cmake {
            path "src/main/native/CMakeLists.txt"
        }
    }

    // Configure build types
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Configure Java compatibility
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    // Android testing dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Android testing configuration
android.testOptions {
    unitTests {
        includeAndroidResources = true
    }
}

// Create a resolvable configuration that extends from implementation
configurations {
    jniImplementation.extendsFrom(implementation)
    jniImplementation.canBeResolved = true
}

// Task to generate JNI headers
tasks.register('generateJniHeaders', JavaCompile) {
    source = android.sourceSets.main.java.srcDirs
    classpath = files(android.bootClasspath) + files(configurations)
    destinationDirectory.set(layout.buildDirectory.dir("classes/java/jni"))
    options.headerOutputDirectory.set(file("src/main/native/jni/include"))
}

// Make sure JNI headers are generated before building
tasks.build {
    dependsOn 'generateJniHeaders'
}
