import com.onemillionworlds.tamarin.gradle.tasks.ParseOpenXr

plugins {
    // Apply the Android library plugin
    id 'com.android.library'
    id 'maven-publish'
    id 'com.onemillionworlds.tamarin.createstructs'
}

group = "com.onemillionworlds.tamarin"
version = "1.0.6-SNAPSHOT"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    google()
}

android {
    namespace 'com.onemillionworlds.tamarin.openxrbindings'
    compileSdk 33

    // Specify the manifest file location
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java', "src/main/generated/java"]
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    defaultConfig {
        minSdk 24
        targetSdk 33

        // Configure CMake
        externalNativeBuild {
            cmake {
                cppFlags ''
                arguments "-DANDROID_STL=c++_shared"
            }
        }

        // Specify which ABIs to build for
        ndk {
            abiFilters 'arm64-v8a' // other values  'armeabi-v7a', 'x86', 'x86_64'
        }
    }

    // Link to CMakeLists.txt
    externalNativeBuild {
        cmake {
            path "src/native/CMakeLists.txt"
        }
    }

    // Configure build types
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Configure Java compatibility
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    // Specify Java toolchain
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

}

// Configure Java compiler to generate JNI header files
tasks.withType(JavaCompile) {
    options.compilerArgs += ["-h", "${project.projectDir}/src/native/headers"]
}

// Configure the CreateStructs task
def generatedOutputDir = file("${project.projectDir}/src/main/generated/java/com.onemillionworlds.tamarin.openxrbindings")
def generatedCOutputDir = file("${project.projectDir}/src/main/generated/native/src")
def openxrHeaderFile = file("${project.projectDir}/src/native/include/openxr/openxr.h")
def xrXmlFile = file("${project.projectDir}/src/openxrSpec/xr.xml")

// Create the output directories
task createGeneratedDirs {
    doLast {
        generatedOutputDir.mkdirs()
        generatedCOutputDir.mkdirs()
    }
}

task parseOpenXrFile(type: ParseOpenXr) {
    dependsOn createGeneratedDirs
    headerFile = openxrHeaderFile
    xrXml = xrXmlFile
    outputDir = generatedOutputDir
    cOutputDir = generatedCOutputDir
}

// Make sure the CreateStructs task runs before Java compilation
tasks.withType(JavaCompile) {
    dependsOn parseOpenXrFile
}

// Ensure extractDebugAnnotations task depends on parseOpenXrFile
android.libraryVariants.all { variant ->
    tasks.matching { task -> task.name.startsWith("extract") && task.name.endsWith("Annotations") }.all { task ->
        task.dependsOn parseOpenXrFile
    }
}
android.libraryVariants.all { variant ->
    tasks.matching { task -> task.name.startsWith("javaDoc") && task.name.endsWith("Generation") }.all { task ->
        task.dependsOn parseOpenXrFile
    }
}

android.libraryVariants.all { variant ->
    tasks.matching { task -> task.name.equals("sourceReleaseJar")}.all { task ->
        task.dependsOn parseOpenXrFile
    }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    // Android testing dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Android testing configuration
android.testOptions {
    unitTests {
        includeAndroidResources = true
    }
}

// Use the new Android publishing DSL
android {
    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = group
                artifactId = 'openxr-bindings-native'
                version = version

                from components.release

                pom {
                    name = 'Tamarin OpenXR Native Bindings'
                    description = 'Native bindings for OpenXR on Android'
                    url = 'https://github.com/oneMillionWorlds/TamarinOpenXrAndroidBindings'
                }
            }
        }
        repositories {
            mavenLocal()
        }
    }
}
