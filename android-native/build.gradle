import com.onemillionworlds.tamarin.gradle.tasks.ParseOpenXr

plugins {
    // Apply the Android library plugin
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
    id 'com.onemillionworlds.tamarin.createstructs'
}

group = "com.onemillionworlds.tamarin"
version = "1.0.0"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    google()
}

android {
    namespace 'com.onemillionworlds.tamarin.openxrbindings'
    compileSdk 36

    // Specify the manifest file location
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            // Wire generated sources so any task consuming sources (compile, sourcesJar, javadoc, etc.)
            // will automatically run parseOpenXrFile first via builtBy linkage.
            java.srcDir(files("src/main/generated/java").builtBy('parseOpenXrFile'))
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
        test {
            java.srcDirs = ['src/test/java']
            resources.srcDirs = ['src/test/resources']
        }
    }

    defaultConfig {
        minSdk 26
        targetSdk 36

        // Configure CMake
        externalNativeBuild {
            cmake {
                cppFlags ''
                arguments "-DANDROID_STL=c++_shared"
            }
        }

        // Specify which ABIs to build for
        ndk {
            abiFilters 'arm64-v8a' // other values  'armeabi-v7a', 'x86', 'x86_64'
        }
    }

    // Link to CMakeLists.txt
    externalNativeBuild {
        cmake {
            path "src/native/CMakeLists.txt"
        }
    }

    // Configure build types
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Configure Java compatibility
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    // Specify Java toolchain
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

}

// Configure Java compiler to generate JNI header files
tasks.withType(JavaCompile) {
    options.compilerArgs += ["-h", "${project.projectDir}/src/native/headers"]
}

// Configure the CreateStructs task
def generatedOutputDir = file("${project.projectDir}/src/main/generated/java/com/onemillionworlds/tamarin/openxrbindings")
def generatedCOutputDir = file("${project.projectDir}/src/main/generated/native/src")
def openxrHeaderFile = file("${project.projectDir}/src/native/include/openxr/openxr.h")
def openxrPlatformHeaderFile = file("${project.projectDir}/src/native/include/openxr/openxr_platform.h")
def xrXmlFile = file("${project.projectDir}/src/openxrSpec/xr.xml")

// Create the output directories
task createGeneratedDirs {
    doLast {
        generatedOutputDir.mkdirs()
        generatedCOutputDir.mkdirs()
    }
}

task parseOpenXrFile(type: ParseOpenXr) {
    dependsOn createGeneratedDirs
    headerFiles.from(openxrHeaderFile, openxrPlatformHeaderFile)
    xrXml = xrXmlFile
    outputDir = generatedOutputDir
    cOutputDir = generatedCOutputDir
}

// Make sure the CreateStructs task runs before Java compilation
tasks.withType(JavaCompile) {
    dependsOn parseOpenXrFile
}

// Ensure extractDebugAnnotations task depends on parseOpenXrFile
android.libraryVariants.all { variant ->
    tasks.matching { task -> task.name.startsWith("extract") && task.name.endsWith("Annotations") }.all { task ->
        task.dependsOn parseOpenXrFile
    }
}
android.libraryVariants.all { variant ->
    tasks.matching { task -> task.name.startsWith("javaDoc") && task.name.endsWith("Generation") }.all { task ->
        task.dependsOn parseOpenXrFile
    }
}

android.libraryVariants.all { variant ->
    tasks.matching { task -> task.name.equals("sourceReleaseJar")}.all { task ->
        task.dependsOn parseOpenXrFile
    }
}

// Ensure native build (CMake/externalNativeBuild) runs after generating sources
// This guarantees the generated C file exists before CMake config/build tasks
// Covers various AGP task names across versions
tasks.matching { task ->
    def n = task.name
    return (n.startsWith("externalNativeBuild") ||
           n.startsWith("configureCMake") ||
           (n.startsWith("generate") && n.contains("CMake"))) && ! n.contains("clean")
}.all { task ->
    task.dependsOn parseOpenXrFile
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    // Android testing dependencies
    testImplementation libs.junit.jupiter.api
    testImplementation libs.jupiter.junit.jupiter.engine
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Android testing configuration
android.testOptions {
    unitTests {
        includeAndroidResources = true
        // Use JUnit Platform (JUnit 5)
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

// Task to update reference struct files with the current generated files
// This task is not part of the normal build process and should be run explicitly
// when you want to accept changes to the generated structs
// Only updates existing reference files, never creates new ones
task updateReferenceStructs {
    description = 'Updates existing reference struct files with the current generated files'
    group = 'Verification'

    doLast {
        def generatedDir = file("${project.projectDir}/src/main/generated/java/com/onemillionworlds/tamarin/openxrbindings")
        def referenceDir = file("${project.projectDir}/src/test/resources/referenceStructs")

        // Ensure reference directory exists
        if (!referenceDir.exists()) {
            referenceDir.mkdirs()
        }

        // Find all existing reference files
        def existingReferenceFiles = referenceDir.listFiles().findAll { 
            it.name.endsWith("_reference.java") 
        }

        println "Found ${existingReferenceFiles.size()} existing reference files"

        // Count of updated files
        def updatedCount = 0

        // For each existing reference file, find the corresponding generated file and update it
        existingReferenceFiles.each { referenceFile ->
            def baseName = referenceFile.name.replace("_reference.java", "")
            def generatedFile = new File(generatedDir, "${baseName}.java")

            if (generatedFile.exists()) {
                // Read the generated file content
                def content = generatedFile.text

                // Write to the reference file
                referenceFile.text = content

                updatedCount++
                println "Updated reference file: ${referenceFile.name}"
            } else {
                println "Warning: Generated file not found for reference: ${referenceFile.name}"
            }
        }

        println "Reference struct files update complete. Updated ${updatedCount} files."
    }
}

// Use the new Android publishing DSL
android {
    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = group
                artifactId = 'openxr-bindings-native'
                version = version

                from components.release

                pom {
                    name = 'Tamarin OpenXR Native Bindings'
                    description = 'Native bindings for OpenXR on Android'
                    url = 'https://github.com/oneMillionWorlds/TamarinOpenXrAndroidBindings'
                }
            }
        }
        repositories {
            // Local publishing for development/testing
            mavenLocal()
            // Sonatype OSSRH for Maven Central
            maven {
                name = 'SonaType'
                url = uri('https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/')
                credentials {
                    username = findProperty('ossrhUsername') ?: System.getenv('OSSRH_USERNAME')
                    password = findProperty('ossrhPassword') ?: System.getenv('OSSRH_PASSWORD')
                }
            }
        }
    }
    // Sign the publication if signing properties are present
    signing {
        def hasSigning = project.hasProperty('signing.keyId') || project.hasProperty('signingKey') || project.hasProperty('signing.secretKeyRingFile')
        if (hasSigning) {
            sign publishing.publications.mavenJava
        }
    }
}

// Ensure `gradlew clean` removes the generated sources and native code under src/main/generated
// We delete the whole directory; it will be recreated by `createGeneratedDirs`/`parseOpenXrFile` during the next build.
tasks.register('cleanGenerated', Delete) {
    delete file("${project.projectDir}/src/main/generated")
}

tasks.named('clean') {
    dependsOn 'cleanGenerated'
}
